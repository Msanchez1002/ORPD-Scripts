GAMS 24.9.2  r64480 Released Nov 14, 2017 WEX-WEI x86 64bit/MS Windows 04/12/21 18:58:55 Page 1
"AC Optimal Power Flow with unit commitment"
C o m p i l a t i o n


   2  *_________________________________________________________________________
      ______
   3  * Filename: uc_polar.gms
   4  * Description: Polar AC Optimal Power Flow model with unit commitment
   5  *
   6  * Usage: gams uc_ac --case=/path/case.gdx
   7  *
   8  * Options:
   9  * --verbose: Supresses printout(0). Default=1
  10  * --obj: Objective function, piecewise linear or quadratic. Default="pwl"
  11  * --times: Select timeframe(s) to solve. Default provided by input file
  12  * --demandbids: Elastic demand bidding turned on(1) or off(0). Default=0
  13  * --linelimits: Type of line limit data to use. Default="given"
  14  * --ramprates: Type of ramprate data to use. Default="given"
  15  * --genPmin: Data for Generator lower limit. Default="given"
  16  * --allon: Option to turn on all lines during solve. Default=none
  17  * --slim: Option to turn on apparent power limits. Default=0
  18  * --relax: Turn on relaxed integer option(1).Default=0.
  19  * --savesol: Turn on save solution option(1). Default=0
  20  * --wind: Whether to turn off wind turbines. Can only be used with
  21  *         PrimeMover,pm_WT. Default=0.
  22  *_________________________________________________________________________
      ______
  23   
  24  * System dependence
  27   
  28  *===== SECTION: OPTIONS & ENVIRONMENT VARIABLES
  29  * Printout options
  31   
  32  * Define filepath, name and extension.
  34  * Define type of model
  36  * Define input case
  39   
  40  * Default: Piecewise linear objective
  42  * Default: elastic demand bidding turned off
  44  * Default: Use provided ramprates (as opposed to uwcalc)
  46  * Default: Use provided line limits (as opposed to uwcalc)
  48  * Default: Use provided generator lower limit
  50  * Default: allon=0
  52  * Default: Use active power limits on line, instead of apparent limits
  54  * Default: Ignore D-curve constraints
  56  * Default: Relaxed MIP option turned off
  58  * Default: Save solution option turned off
  60   
  61   
  62  *===== SECTION: EXTRACT DATA
BATINCLUDE C:\Users\Jairo\Downloads\Prueba\models\extract_data_uc.gms
  64  *==== SECTION: Data (pre) declaration
  65  sets
  66  * New sets
  67    conj /real,imag/
  68    costcoefset "Placeholder set for quadratic function coefficients (0,1,2)
      " /0*2/
  69    costptset "Placeholder set for pwl function pieces" /1*40/
  70   
  71  * Based on %times% option. See LOADR t below for default option if %times%
       not set
  72  t /4*6/,
  74   
  75  * Dataset sets
  76    bus, gen, circuit,
  77    interface, interfacemap (interface,bus,bus),
  78    fuel_t, fuel_s, prime_mover,
  79    bus_t, bus_s,
  80    gen_t, gen_s,
  81    branch_t, branch_s,
  82   
  83    interface_t,
  84    line(bus,bus,circuit),
  85    transformer(bus,bus,circuit),
  86    monitored_lines(bus,bus,circuit)
  87  ;
  88   
  89  *-- Aliases
  90  alias(bus,i,j);
  91  alias(circuit,c);
  92  alias(t,t1);
  93  alias (gen,gen1);
  94   
  95  parameters
  96      version, baseMVA, total_cost,
  97  * Domain info not stated because of how we iterate through data
  98      businfo(bus,*,*),
  99      geninfo(gen,*,*),
 100      fuelinfo(*,*),
 101      branchinfo(*,*,*,*,*),
 102      interfaceinfo(*,*,*)
 103  ;
 104   
 105  *-- Specially handled data (option specific)
 107  sets
 108    demandbid_t(*) / /
 109    demandbid_s(*) / /
 110    demandbid(*) / /
 111    demandbidmap (*,*) / /
 112  ;
 113   
 114  parameters
 115    demandbidinfo(*,*,*,*) / /
 116  ;
 118   
 119   
 120  *==== SECTION: Data read-in from input file
GDXIN   C:\Users\Jairo\Desktop\Modelo\Testcases_gdx\case118_spring_wday.gdx
--- LOAD  version = 1:version
--- LOAD  baseMVA = 3:baseMVA
--- LOAD  total_cost = 2:total_cost
 123   
 124  * If %times% not provided, use default in dataset
 126   
--- LOAD  bus = 6:bus
--- LOAD  gen = 7:gen
--- LOAD  circuit = 8:circuit
--- LOAD  line = 9:line
--- LOAD  transformer = 10:transformer
--- LOAD  monitored_lines = 11:monitored_lines
--- LOAD  bus_t = 16:bus_t
--- LOAD  bus_s = 17:bus_s
--- LOAD  gen_t = 18:gen_t
--- LOAD  gen_s = 19:gen_s
--- LOAD  branch_t = 20:branch_t
--- LOAD  branch_s = 21:branch_s
--- LOAD  fuel_t = 22:fuel_t
--- LOAD  fuel_s = 23:fuel_s
--- LOAD  prime_mover = 24:prime_mover
--- LOAD  businfo = 28:businfo
--- LOAD  geninfo = 29:geninfo
--- LOAD  branchinfo = 30:branchinfo
--- LOAD  fuelinfo = 33:fuelinfo
--- LOAD  interface = 14:interface
--- LOAD  interfacemap = 15:interfacemap
--- LOAD  interfaceinfo = 32:interfaceinfo
--- LOAD  interface_t = 27:interface_t
 132   
 133  * Option to use elastic demand bidding turned on
 136   
 137  *==== SECTION: Validity of options
 138  * linelimits, case insensitive
 141   
 142  * ramprates, case insensitive
 145   
 146  * genPmin, case insensitive
 149   
 150  * allon, case insensitive
 153   
 154  *==== SECTION: Data Declaration (extracted/manipulated from datafile)
 155  *-- All OPF models
 156  parameters
 157    type(bus)          "bus type (probably irrelevant, but gives reference b
      us[es])"
 158    pf(bus)            "bus demand power factor"
 159    Pd(bus,t)          "bus real power demand"
 160   
 161    Pg(gen,t)          "gen real power output"
 162    Pmax(gen)          "gen maximum real power output"
 163    Pmin(gen)          "gen minimum real power output"
 164    Va(bus,t)          "bus voltage angle"
 165   
 166    Vm(bus,t)          "bus voltage magnitude"
 167    MaxVm(bus) "maximum bus voltage magnitude"
 168    MinVm(bus) "minimum bus voltage magnitude"
 169    Gs(bus)            "bus shunt conductance"
 170   
 171    rampup(gen)        "increasing ramp rate of generator"
 172    rampdown(gen)      "decreasing ramp rate of generator"
 173    atBus(gen,bus)     "Location of generator"
 174    status(gen,t)      "generator status"
 175   
 176    costcoef           "gen cost coefficients"
 177    costpts_x          "gen cost breakpoints (piecewise linear)"
 178    costpts_y          "gen cost breakpoints (piecewise linear)"
 179   
 180    costmodel(gen)     "gen cost model type"
 181    numcostpts(gen)    "gen cost number of piecewise points"
 182    numcostcoef(gen)   "gen cost number of coefficients"
 183    noloadcost(gen)    "generator no load operating cost for piecewise cost 
      functions"
 184    startupcost(gen)   "generator startup cost"
 185    shutdowncost(gen)  "generator shutdown cost"
 186    minuptime(gen)     "generator minimum time to remain on"
 187    mindowntime(gen)   "generator minimum time to remain off"
 188   
 189    r(i,j,c)           "line resistance",
 190    x(i,j,c)           "line reactance",
 191    B(i,j,c)           "line susceptance",
 192    ratio(i,j,c)       "transformer tap ratio",
 193    angle(i,j,c)       "transformer tap angle",
 194    rateA(i,j,c)       "line power limits (MW)",
 195    currentrate(i,j,c)  "line current limits",
 196    branchstatus(i,j,c,t) "line status",
 197    interfaceLimit(interface,t) "Limit on power across each interface"
 198  ;
 199   
 200  * Bus type
 201  type(bus)  = businfo(bus,'type','given');
 202  * Power factor
 203  pf(bus)    = businfo(bus,'pf','given');
 204  * Bus demand (real power)
 205  Pd(bus,t)  = businfo(bus,'Pd',t)/baseMVA;
 206   
 207  * Bus shunt conductance
 208  Gs(bus)    = businfo(bus,'Gs','given')/baseMVA;
 209   
 210  atBus(gen,bus)$geninfo(gen,'atBus',bus) = 1;
 211  Pg(gen,t) = geninfo(gen,'Pg',t)/baseMVA;
 212   
 213  * Maximum power generation
 214  Pmax(gen) = geninfo(gen,'Pmax','given')/baseMVA;
 215   
 216  * Minimum power generation options
 218    Pmin(gen)= geninfo(gen,'Pmin','given')/baseMVA;
 220   
 221  * Voltage angle
 222  Va(bus,t)  = businfo(bus,'Va',t)*pi/180;
 223  * Voltage  magnitude information
 224  Vm(bus,t)  = businfo(bus,'Vm',t);
 225  maxVm(bus) = businfo(bus,'maxVm','given');
 226  minVm(bus) = businfo(bus,'minVm','given');
 227   
 228  * Initial generator commitment
 229  status(gen,t) = geninfo(gen,'status',t);
 230   
 231  * Initial branch status (active/not connected)
 232  branchstatus(i,j,c,t)$line(i,j,c) = branchinfo(i,j,c,'branchstatus',t);
 233   
 234  * Min up and down times
 235  minuptime(gen)   = geninfo(gen,'MinUptime','given');
 236  mindowntime(gen) = geninfo(gen,'MinUptime','given');
 237   
 238  * Ramp rates, uwcalc or given
 239  rampup(gen)   = geninfo(gen,'RampUp','given')/baseMVA;
 240  rampdown(gen) = geninfo(gen,'RampDown','given')/baseMVA;
 241   
 242  * Define original cost model in dataset
 243  costmodel(gen) = geninfo(gen,'costmodel','given');
 244   
 245  * No load, startup, shutdown cost
 246  noloadcost(gen) = geninfo(gen,'noloadcost','given');
 247  startupcost(gen) = geninfo(gen,'startupcost','given');
 248  shutdowncost(gen) = geninfo(gen,'shutdowncost','given');
 249   
 250  * Quadratic objective function
 251  numcostcoef(gen) = geninfo(gen,'numcostcoef','given');
 252  costcoef(gen,costcoefset)$geninfo(gen,'costcoef',costcoefset) = geninfo(ge
      n,'costcoef',costcoefset);
 253   
 254  * Piecewise linear information
 255  numcostpts(gen) = geninfo(gen,'numcostpts','given');
 256  costpts_x(gen,costptset)$geninfo(gen,'costpts_x',costptset)   = geninfo(ge
      n,'costpts_x',costptset);
 257  costpts_y(gen,costptset)$geninfo(gen,'costpts_y',costptset)   = geninfo(ge
      n,'costpts_y',costptset);
 258   
 259  * Line resistance (r) and reactance (x)
 260  r(i,j,c)$line(i,j,c) = branchinfo(i,j,c,'r','given');
 261  x(i,j,c)$line(i,j,c) = branchinfo(i,j,c,'x','given');
 262   
 263  * Line limit (active power)
 264  rateA(i,j,c)$line(i,j,c) = branchinfo(i,j,c,'rateA','given')/baseMVA;
 265  rateA(j,i,c)$line(i,j,c) = rateA(i,j,c);
 266  * If linelimits=inf, no monitored lines
 268   
 269  * Limit on power across each interface
 270  interfaceLimit(interface,t) = interfaceinfo(interface,t,'rateA')/baseMVA;
 271   
 272  * Line current
 273  currentrate(i,j,c)$line(i,j,c) = branchinfo(i,j,c,'currentrateA','given');
 274  currentrate(j,i,c)$line(i,j,c) = branchinfo(i,j,c,'currentrateA','given');
 275   
 276  * Take down all lines to buses marked as "isolated"
 277  branchstatus(i,j,c,t)$(type(i) eq 4 or type(j) eq 4) = 0;
 278   
 279  * Line susceptance
 280  B(i,j,c)$line(i,j,c) = -x(i,j,c)/(sqr(r(i,j,c))+sqr(x(i,j,c)));
 281  B(j,i,c)$b(i,j,c) = b(i,j,c);
 282   
 283  * transformer tap ratios and angles
 284  ratio(i,j,c)$line(i,j,c) = branchinfo(i,j,c,'ratio','given');
 285  ratio(j,i,c)$ratio(i,j,c) =  ratio(i,j,c);
 286  angle(i,j,c)$line(i,j,c) = branchinfo(i,j,c,'angle','given') * pi/180;
 287  angle(j,i,c)$angle(i,j,c) = -angle(i,j,c);
 288   
 289   
 290   
 292  *---- AC model data types
 293  parameters
 294    Qd(bus,t) "bus reactive power demand"
 295   
 296    Qg(gen,t)   "gen reactive power output"
 297    Qmax(gen)   "gen maximum reactive power output"
 298    Qmin(gen)   "gen minimum reactive power output"
 299   
 300    Bs(bus) "bus shunt susceptance"
 301    yb(i,j,conj,t) "Bus admittance matrix, Ybus"
 302   
 303    g(i,j,c) "line conductance",
 304    bc(i,j,c) "line charging susceptance"
 305    Bswitched(bus,bus_s) "susceptance of switched shunts",
 306    numBswitched(bus,bus_s) "number of each type of switched shunt elements 
      at each bus"
 307  ;
 308   
 309  * Reactive power information
 310  Qd(bus,t)  = businfo(bus,'Qd',t)/baseMVA;
 311  Qmax(gen) = geninfo(gen,'Qmax','given')/baseMVA;
 312  Qmin(gen) = geninfo(gen,'Qmin','given')/baseMVA;
 313  Qg(gen,t) = geninfo(gen,'Qg',t)/baseMVA;
 314   
 315  * Bus shunt conductance and susceptance
 316  Bs(bus)    = businfo(bus,'Bs','given')/baseMVA;
 317   
 318  * line conductance
 319  g(i,j,c)$line(i,j,c) =  r(i,j,c)/(sqr(r(i,j,c))+sqr(x(i,j,c)));
 320  g(j,i,c)$g(i,j,c) = g(i,j,c);
 321   
 322  * line charging conductance
 323  bc(i,j,c)$line(i,j,c) = branchinfo(i,j,c,'bc','given');
 324  bc(j,i,c)$bc(i,j,c) = bc(i,j,c);
 325   
 326  * number and susceptance of switched shunt element data
 327  numBswitched(bus,bus_s) = businfo(bus,'switchedelements',bus_s);
 328  Bswitched(bus,bus_s)    = businfo(bus,'switchedBs',bus_s)/baseMVA;
 329   
 331   
 332   
 333  * ==== SECTION: Additional Model Options
 334  *-- Elastic demand bidding turned on/off
 336   
 337   
 338  *-- %allon% options
 340   
 341   
 342  *===== SECTION: DATA MANIPULATION
 343  * If no data is provided for a generator's minimum up and down time, set t
      o 1
 344  minuptime(gen) = max(1,minuptime(gen));
 345  mindowntime(gen) = max(1,mindowntime(gen));
 346   
 347  rampup(gen) = rampup(gen)*baseMVA;
 348  rampdown(gen) = rampdown(gen)*baseMVA;
 349   
 350  *--- Define load, gen buses and active lines
 351  sets
 352      load(bus) "Load buses"
 353      isGen(bus) "Generator buses"
 354      isLine(i,j) "Active (i,j) line"
 355  ;
 356   
 357  load(bus)$(sum(gen, atBus(gen,bus)) eq 0)  = 1;
 358  isGen(bus)$(not(load(bus))) = 1;
 359  option isLine < branchstatus;
 360   
 361  *===== SECTION: VARIABLE DEFINITION
 362  free variables
 363      V_P(gen,t)            "Real power generation of generator at time t"
 364      V_Q(gen,t)            "Reactive power generation of generator at time 
      t"
 365      V_Theta(bus,t)         "Bus voltage angle"
 366   
 367      V_LineP(i,j,c,t)   "Real power flowing from bus i towards bus j on lin
      e c at time t"
 368      V_LineQ(i,j,c,t)   "Real power flowing from bus i towards bus j on lin
      e c at time t"
 369      V_interfaceP(i,j,c,t) "Real power flow on interface (i,j,c) at time t"
 370  ;
 371   
 372  binary variables
 373      V_genstatus(gen,t)    "Generator commitment status for time t"
 374  ;
 375   
 376  positive variables
 377      V_startup(gen,t) "(0,1) startup status of generator at time t"
 378      V_shutdown(gen,t) "(0,1) shutdown status of generator at time t"
 379   
 380      V_shunt(bus,bus_s,t)    "Bus shunt susceptance"
 381      V_V(bus,t)         "Voltage real part at bus at time t"
 382   
 383      V_pw_cost(gen,t) "Generator piecewise cost"
 384      V_Pd_elastic(demandbid,t) "Elastic incremental demand"
 385      V_demandbid_rev(demandbid,t) "Revenue from elastic incremental demand"
 386  ;
 387   
 388  free variable V_objcost "Total cost of objective function";
 389   
 390   
 391  *===== SECTION: EQUATION DEFINITION
 392  equations
 393      c_SLimit(i,j,c,t)   "Apparent power limit on line ijc"
 394      c_LinePij(i,j,c,t)    "Real power flowing from bus i into bus j along 
      line c"
 395      c_LinePji(i,j,c,t)    "Real power flowing from bus j into bus i along 
      line c"
 396      c_LineQij(i,j,c,t)    "Reactive power flowing from bus i into bus j al
      ong line c"
 397      c_LineQji(i,j,c,t)    "Reactive power flowing from bus j into bus i al
      ong line c"
 398   
 399      c_BalanceP(bus,t) "Balance of real power for bus at time t"
 400      c_BalanceQ(bus,t) "Balance of reactive power for bus at time t"
 401   
 402      c_GenStatusMin(gen,t) "Generator minimum operating capacity"
 403      c_GenStatusMax(gen,t) "Generator maximum operating capacity"
 404      c_GenStatusQMin(gen,t) "Generator minimum operating capacity"
 405      c_GenStatusQMax(gen,t) "Generator maximum operating capacity"
 406      c_StartupShutdown(gen,t) "Relationship of binary (start,shut,status) v
      ariables"
 407      c_MinUptime(gen,t) "Minimum generator run time"
 408      c_MinDowntime(gen,t) "Minimum generator down time"
 409      c_RampUp(gen,t) "Generator ramp up constraints"
 410      c_RampDown(gen,t) "Generator ramp down constraints"
 411   
 412      c_InterfaceP(i,j,c,t) "Definition of real power on interfaces involvin
      g (i,j,c) at time"
 413      c_InterfaceLimit(interface,t) "Limit of real power on interface at tim
      e t"
 414   
 415      c_anglediffIJ(i,j,t) "Limit on (i,j) angle"
 416      c_anglediffJI(i,j,t) "Limit on (j,i) angle"
 417   
 418  * If elastic bidding is turned on
 420   
 421      c_pw_cost(gen,t,costptset)
 422      c_obj
 423  ;
 424   
 425  *===== SECTION: EQUATIONS PART 1
 426  * Apparent power limit on line ijc
 427  c_SLimit(i,j,c,t)$(branchstatus(i,j,c,t) or branchstatus(j,i,c,t))..
 428  sqr(V_LineP(i,j,c,t)) + sqr(V_LineQ(i,j,c,t)) =l= sqr(rateA(i,j,c));
 429   
 430  * Real power flowing from bus i into bus j along line c
 431  c_LinePij(i,j,c,t)$(branchstatus(i,j,c,t))..
 432           V_LineP(i,j,c,t) =e=
 433              (g(i,j,c) * sqr(V_V(i,t)) / sqr(ratio(i,j,c)))
 434              - (V_V(i,t) * V_V(j,t) / ratio(i,j,c)) *
 435                  (  g(i,j,c) * cos(V_Theta(i,t) - V_Theta(j,t) - angle(i,j,
      c))
 436                   + b(i,j,c) * sin(V_Theta(i,t) - V_Theta(j,t) - angle(i,j,
      c)))
 437  ;
 438   
 439  *Real power flowing from bus j into bus i along line c
 440  c_LinePji(i,j,c,t)$(branchstatus(i,j,c,t))..
 441           V_LineP(j,i,c,t) =e=
 442             g(i,j,c) * sqr(V_V(j,t))
 443             - (V_V(i,t) * V_V(j,t) / ratio(i,j,c)) *
 444                 (  g(i,j,c) * cos(V_Theta(j,t) - V_Theta(i,t) + angle(i,j,c
      ))
 445                  + b(i,j,c) * sin(V_Theta(j,t) - V_Theta(i,t) + angle(i,j,c
      )))
 446  ;
 447   
 448  * Reactive power flowing from bus i into bus j along line c
 449  c_LineQij(i,j,c,t)$(branchstatus(i,j,c,t))..
 450           V_LineQ(i,j,c,t) =e=
 451              - (sqr(V_V(i,t)) * (b(i,j,c) + bc(i,j,c)/2) / sqr(ratio(i,j,c)
      ))
 452              - (V_V(i,t) * V_V(j,t) / ratio(i,j,c)) *
 453                  (  g(i,j,c) * sin(V_Theta(i,t) - V_Theta(j,t) - angle(i,j,
      c))
 454                   - b(i,j,c) * cos(V_Theta(i,t) - V_Theta(j,t) - angle(i,j,
      c)))
 455  ;
 456   
 457  * Reactive power flowing from bus j into bus i along line c
 458  c_LineQji(i,j,c,t)$(branchstatus(i,j,c,t))..
 459           V_LineQ(j,i,c,t) =e=
 460              - (sqr(V_V(j,t)) * (b(i,j,c) + bc(i,j,c)/2))
 461              - (V_V(i,t) * V_V(j,t) / ratio(i,j,c)) *
 462                  (  g(i,j,c) * sin(V_Theta(j,t) - V_Theta(i,t) + angle(i,j,
      c))
 463                   - b(i,j,c) * cos(V_Theta(j,t) - V_Theta(i,t) + angle(i,j,
      c)))
 464  ;
 465   
 466  * Active power node balance eqn
 467  c_BalanceP(i,t)$(type(i) ne 4)..
 468            sum(gen$(atBus(gen,i) and status(gen,t)), V_P(gen,t))
 469            - Pd(i,t)
 470            - sum(demandbid$demandbidmap(demandbid,i), V_Pd_elastic(demandbi
      d,t))
 471              =e=
 472            sum((j,c)$(branchstatus(i,j,c,t)), V_LineP(i,j,c,t))
 473            + sum((j,c)$(branchstatus(j,i,c,t)), V_LineP(i,j,c,t))
 474            + sqr(V_V(i,t)) * Gs(i)
 475  ;
 476   
 477  * Reactive power node balance eqn
 478  c_BalanceQ(i,t)$(type(i) ne 4)..
 479            sum(gen$(atBus(gen,i) and status(gen,t)), V_Q(gen,t))
 480            - Qd(i,t)
 481              =e=
 482             sum((j,c)$(branchstatus(i,j,c,t)), V_LineQ(i,j,c,t))
 483            + sum((j,c)$(branchstatus(j,i,c,t)), V_LineQ(i,j,c,t))
 484            - sqr(V_V(i,t)) * Bs(i)
 485            - sqr(V_V(i,t)) * sum(bus_s$(not sameas(bus_s,'given')), bswitch
      ed(i,bus_s) * V_shunt(i,bus_s,t))
 486  ;
 487   
 488   
 489  * Definition of real power on interfaces involving (i,j,c) at time t
 490  * Since we only care about interfaces in the specified direction, we don't
       need abs(LinePower)
 491  c_InterfaceP(i,j,c,t)$((branchstatus(i,j,c,t) or branchstatus(j,i,c,t))
 492      and (sum(interface$interfacemap(interface,i,j), 1) ge 1))..
 493  V_interfaceP(i,j,c,t) =e= V_LineP(i,j,c,t);
 494   
 495  * Limit of real power on interface at time t
 496  c_InterfaceLimit(interface,t)..
 497  sum((i,j,c)$(interfacemap(interface,i,j) and (branchstatus(i,j,c,t) or bra
      nchstatus(j,i,c,t))),
 498      V_interfaceP(i,j,c,t)) =l=  interfaceLimit(interface,t);
 499   
 500  * Generator minimum operating capacity
 501  c_GenStatusMin(gen,t)..
 502      V_genstatus(gen,t) * Pmin(gen) =l= V_P(gen,t)
 503  ;
 504   
 505  * Generator maximum operating capacity
 506  c_GenStatusMax(gen,t)..
 507      V_P(gen,t) =l= V_genstatus(gen,t) * Pmax(gen)
 508  ;
 509   
 510  * Generator minimum operating capacity
 511  c_GenStatusQMin(gen,t)..
 512      V_genstatus(gen,t) * Qmin(gen) =l= V_Q(gen,t)
 513  ;
 514   
 515  * Generator maximum operating capacity
 516  c_GenStatusQMax(gen,t)..
 517      V_Q(gen,t) =l= V_genstatus(gen,t) * Qmax(gen)
 518  ;
 519   
 520  * Relationship of binary (start,shut,status) variables
 521  c_StartupShutdown(gen,t)..
 522  V_startup(gen,t) - V_shutdown(gen,t) =e= V_genstatus(gen,t) - V_genstatus(
      gen,t-1);
 523   
 524   
 525  * Minimum generator run time
 526  c_MinUptime(gen,t)$(minuptime(gen) gt 0)..
 527  V_genstatus(gen,t) =g=
 528      sum(t1$((ord(t1) ge (ord(t) - minuptime(gen) + 1)) and (ord(t1) le ord
      (t))), V_startup(gen,t1))
 529  ;
 530   
 531  * Minimum generator down time
 532  c_MinDowntime(gen,t)$(mindowntime(gen) gt 0)..
 533  V_genstatus(gen,t) =l=
 534      1 - sum(t1$((ord(t1) ge (ord(t) - mindowntime(gen) + 1)) and (ord(t1) 
      le ord(t))), V_shutdown(gen,t1))
 535  ;
 536   
 537  * Generator ramp up constraints
 538  c_RampUp(gen,t)$(ord(t) ge 2)..
 539  V_P(gen,t) =l=  V_P(gen,t-1) + rampup(gen)*V_genstatus(gen,t) + (Pmax(gen)
      -rampup(gen))*V_startup(gen,t);
 540   
 541  * Generator ramp down constraints
 542  c_RampDown(gen,t)$(ord(t) ge 2)..
 543  V_P(gen,t-1) =l=
 544      V_P(gen,t) + rampdown(gen)*V_genstatus(gen,t) + (Pmax(gen)-rampdown(ge
      n))*V_shutdown(gen,t)
 545  ;
 546   
 547  * Limit on (i,j) angle
 548  c_anglediffIJ(i,j,t)$isLine(i,j)..
 549  V_Theta(i,t)-V_Theta(j,t) =l= pi/3;
 550   
 551  * Limit on (j,i) angle
 552  c_anglediffJI(i,j,t)$isLine(i,j)..
 553  V_Theta(j,t)-V_Theta(i,t) =l= pi/3;
 554   
 555  * Objective functions and pwl costs are listed in a separate file
BATINCLUDE C:\Users\Jairo\Downloads\Prueba\models\cost_objective_uc.gms
GAMS 24.9.2  r64480 Released Nov 14, 2017 WEX-WEI x86 64bit/MS Windows 04/12/21 18:58:55 Page 2
Cost objective calculations for UC models
C o m p i l a t i o n


 558  costmodel(gen)= 0;
 560   
 561  *-- Convexity Check
 562  * Not part of system of equations
 563  * LP/QCP/NLP can't handle nonconvex piecewise linear cost functions
 564  set thisgen(gen);
 565   
 566  parameters cur_slope, next_slope;
 567  loop(gen$((smax(t,status(gen,t)) ge 1)  and (numcostpts(gen) > 2)),
 568      next_slope = (costpts_y(gen,'2') - costpts_y(gen,'1'))
 569                   / (costpts_x(gen,'2') - costpts_x(gen,'1'));
 570      loop(costptset$(ord(costptset) < numcostpts(gen) - 1),
 571          cur_slope = next_slope;
 572          if((ord(costptset) < numcostpts(gen) - 2) and (costpts_x(gen,costp
      tset+2) eq costpts_x(gen,costptset+1)),
 573              abort "Zero-length piecewise segment detected";
 574          );
 575          next_slope = (costpts_y(gen,costptset+2) - costpts_y(gen,costptset
      +1))
 576                       / (costpts_x(gen,costptset+2) - costpts_x(gen,costpts
      et+1))
 577          if(cur_slope-next_slope > 1e-8 ,
 578              thisgen(gen1)=no; thisgen(gen)=yes;
 579              display thisgen, cur_slope, next_slope;
 580              abort "Nonconvex piecewise linear costs not supported";
 581          );
 582      );
 583  );
 584   
 585   
 586  *===== SECTION: EQUATIONS PART 2
 587  * Defining piecewise linear generator cost curves
 588  * P is in per-unit, costpts_x is in MW, and costpts_y is in $/hr
 589  c_pw_cost(gen,t,costptset)$((ord(costptset) < numcostpts(gen)) and (costmo
      del(gen) eq 1))..
 590  V_pw_cost(gen,t) =g=
 591      ((costpts_y(gen,costptset+1) - costpts_y(gen,costptset))/
 592       (costpts_x(gen,costptset+1) - costpts_x(gen,costptset)))
 593        * (V_P(gen,t)*baseMVA - costpts_x(gen,costptset))
 594      + costpts_y(gen,costptset)*V_genstatus(gen,t)
 595  ;
 596   
 598   
 599  * Objective function
 600  c_obj..
 601      V_objcost =e=
 603      0
 605  ;
 606   
 607  *===== SECTION: MODEL DEFINITION
 608  model feas /c_LinePij, c_LinePji, c_LineQij, c_LineQji,
 609              c_BalanceP, c_BalanceQ, c_GenStatusMin, c_GenStatusMax, c_GenS
      tatusQMin, c_GenStatusQMax,
 610              c_StartupShutdown, c_MinUptime, c_MinDowntime, c_RampUp, c_Ram
      pDown,
 611              c_InterfaceP, c_InterfaceLimit,
 612              c_anglediffIJ, c_anglediffJI
 615        /;
 616  model uc_ac /feas, c_pw_cost, c_obj/;
 617   
 618  *===== SECTION: VARIABLE BOUNDS
 619  * Generator active power generation limits
 620  V_P.lo(gen,t) = 0;
 621  V_P.up(gen,t) = Pmax(gen);
 623  * Generator reactive power generation limits
 624  V_Q.lo(gen,t) = min(Qmin(gen),0);
 625  V_Q.up(gen,t) = Qmax(gen);
 626   
 627  * Bus voltage magnitude limits
 628  V_V.lo(bus,t) = MinVm(bus);
 629  V_V.up(bus,t) = MaxVm(bus);
 630   
 631  * Fix swing bus angle
 632  V_Theta.fx(bus,t)$(type(bus) eq 3) = 0;
 633   
 635  * Line real power flow limits
 636  V_LineP.lo(i,j,c,t)$branchstatus(i,j,c,t) = -rateA(i,j,c);
 637  V_LineP.up(i,j,c,t)$branchstatus(i,j,c,t) =  rateA(i,j,c);
 638  V_LineP.lo(j,i,c,t)$(branchstatus(i,j,c,t)) = -rateA(i,j,c);
 639  V_LineP.up(j,i,c,t)$(branchstatus(i,j,c,t)) =  rateA(i,j,c);
 641   
 642  * Bus shunt susceptance
 643  V_shunt.up(bus,bus_s,t) = numBswitched(bus,bus_s);
 645   
 646  *--- Elastic demand
 647  * If user chooses option --demandbids=0, no elastic demand is considered
 648  * Otherwise, set bounds on elastic demand
 650    V_Pd_elastic.fx(demandbid,t) = 0;
 651    V_demandbid_rev.fx(demandbid,t) = 0;
 653   
 654   
 655  *===== SECTION: VARIABLE INITIAL STARTING POINTS
 656  V_shunt.l(bus,bus_s,t)  = 1;
 657  * Starting values may be provided in the data file
 658  * Startup and shutdown variables are binary {0,1} via equations
 659  V_genstatus.fx(gen,t) = status(gen,t);
 660  V_genstatus.l(gen,t) = status(gen,t);
 661  V_startup.l(gen,t)  = max(0, status(gen,t)-status(gen,t-1));
 662  V_shutdown.l(gen,t) = max(0, status(gen,t-1)-status(gen,t));
 663   
 664  V_P.l(gen,t) = Pg(gen,t);
 665  V_Q.l(gen,t) = Qg(gen,t);
 666  V_V.l(bus,t) = Vm(bus,t);
 667  V_Theta.l(bus,t)$(type(bus) ne 3) = Va(bus,t);
 668   
 669  * Derived variables
 670  V_LineP.l(i,j,c,t)$branchstatus(i,j,c,t) =  (g(i,j,c) * sqr(V_V.l(i,t)) / 
      sqr(ratio(i,j,c)))
 671              - (V_V.l(i,t) * V_V.l(j,t) / ratio(i,j,c)) *
 672                  (  g(i,j,c) * cos(V_Theta.l(i,t) - V_Theta.l(j,t) - angle(
      i,j,c))
 673                   + b(i,j,c) * sin(V_Theta.l(i,t) - V_Theta.l(j,t) - angle(
      i,j,c)));
 674   
 675   V_LineP.l(j,i,c,t)$branchstatus(i,j,c,t) = g(i,j,c) * sqr(V_V.l(j,t))
 676             - (V_V.l(i,t) * V_V.l(j,t) / ratio(i,j,c)) *
 677                 (  g(i,j,c) * cos(V_Theta.l(j,t) - V_Theta.l(i,t) + angle(i
      ,j,c))
 678                  + b(i,j,c) * sin(V_Theta.l(j,t) - V_Theta.l(i,t) + angle(i
      ,j,c)));
 679   
 680   V_LineQ.l(i,j,c,t)$branchstatus(i,j,c,t) = - (sqr(V_V.l(i,t)) * (b(i,j,c)
       + bc(i,j,c)/2) / sqr(ratio(i,j,c)))
 681              - (V_V.l(i,t) * V_V.l(j,t) / ratio(i,j,c)) *
 682                  (  g(i,j,c) * sin(V_Theta.l(i,t) - V_Theta.l(j,t) - angle(
      i,j,c))
 683                   - b(i,j,c) * cos(V_Theta.l(i,t) - V_Theta.l(j,t) - angle(
      i,j,c)));
 684   
 685   V_LineQ.l(j,i,c,t)$branchstatus(i,j,c,t) =  - (sqr(V_V.l(j,t)) * (b(i,j,c
      ) + bc(i,j,c)/2))
 686              - (V_V.l(i,t) * V_V.l(j,t) / ratio(i,j,c)) *
 687                  (  g(i,j,c) * sin(V_Theta.l(j,t) - V_Theta.l(i,t) + angle(
      i,j,c))
 688                   - b(i,j,c) * cos(V_Theta.l(j,t) - V_Theta.l(i,t) + angle(
      i,j,c)));
 689   
 690  V_interfaceP.l(i,j,c,t)$((branchstatus(i,j,c,t) or branchstatus(j,i,c,t))
 691      and (sum(interface$interfacemap(interface,i,j), 1) ge 1)) = V_LineP.l(
      i,j,c,t);
 692   
 693  * Derived objective function
 694  V_pw_cost.l(gen,t) = max(0,smax((costptset)$((ord(costptset) < numcostpts(
      gen)) and (costmodel(gen) eq 1)),
 695      ((costpts_y(gen,costptset+1) - costpts_y(gen,costptset))/
 696       (costpts_x(gen,costptset+1) - costpts_x(gen,costptset)))
 697        * (V_P.l(gen,t)*baseMVA - costpts_x(gen,costptset))
 698      + costpts_y(gen,costptset)*V_genstatus.l(gen,t)))
 699  ;
 700   
 701   
 702  V_objcost.l =
 704      0
 706  ;
 707   
 708  display rampup, rampdown, minuptime, mindowntime;
 709   
 710  *===== SECTION: MODEL OPTIONS AND SOLVE
 711  *---- Basic options
 713      solve uc_ac min V_objcost using minlp;
 715   
 716   
 717   
 718  *==== SECTION: Solution Analysis
 719  * See if model is solved
 720  parameter
 721      infeas "Number of infeasibilities from model solve";
 722   
 723  infeas = uc_ac.numInfes;
 724  display infeas;
 725   
 726  * Declaration needs to be made outside loop
 727  set
 728      lines_at_limit(i,j,c,t) "lines at their bound"
 729  ;
 730  parameters
 731      total_cost "Cost of objective function"
 732      LMP(bus,t) "Locational marginal price"
 733      LineSP(i,j,c,t) "Marginal price of active power on line (i,j,c)"
 734      shuntB(i,t)
 735  ;
 736   
 737  if(infeas eq 0,
 738  * Final Objective function value
 739      total_cost = V_objcost.l;
 740  * Status information
 741      status(gen,t) = V_genstatus.l(gen,t);
 742  * Generator real power solution
 743      Pg(gen,t) = V_P.l(gen,t);
 744  * Generator reactive power solution
 745      Qg(gen,t) = V_Q.l(gen,t);
 746  * Voltage magnitude solution
 747      Vm(bus,t)  = V_V.l(bus,t);
 748  * Voltage angle solution
 749      Va(bus,t)  = V_Theta.l(bus,t)/pi*180;
 750  * Bus shunt solution
 751      shuntB(i,t) = sum(bus_s, V_shunt.l(i,bus_s,t)*Bswitched(i,bus_s));
 752  * Locational marginal price of bus at time t
 753      LMP(bus,t) = c_BalanceP.m(bus,t);
 754  * Marginal for active power on a line
 755      LineSP(i,j,c,t)$branchstatus(i,j,c,t) = V_LineP.m(i,j,c,t)$(abs(V_Line
      P.m(i,j,c,t)) > Eps);
 756      LineSP(j,i,c,t)$branchstatus(i,j,c,t) = V_LineP.m(j,i,c,t)$(abs(V_Line
      P.m(j,i,c,t)) > Eps);
 757   
 758  * Find which lines are at their limits
 759  lines_at_limit(i,j,c,t)$branchstatus(i,j,c,t) = yes$(abs(LineSP(i,j,c,t)) 
      gt 1e-8);
 760  display lines_at_limit;
 761   
 762  *==== SECTION: Solution Save
 764   
 765  * END IF-loop if(infeas eq 0)
 766  );
GAMS 24.9.2  r64480 Released Nov 14, 2017 WEX-WEI x86 64bit/MS Windows 04/12/21 18:58:55 Page 3
Cost objective calculations for UC models
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Users\Jairo\Downloads\Prueba\models
                                          \uc_polar.gms
     2       63 BATINCLUDE     1      69  .C:\Users\Jairo\Downloads\Prueba\model
                                           s\extract_data_uc.gms
     3      121 GDXIN          2      58  .C:\Users\Jairo\Desktop\Modelo\Testcas
                                           es_gdx\case118_spring_wday.gdx
     4      556 BATINCLUDE     1     285  .C:\Users\Jairo\Downloads\Prueba\model
                                           s\cost_objective_uc.gms


COMPILATION TIME     =        0.016 SECONDS      4 MB  24.9.2 r64480 WEX-WEI
GAMS 24.9.2  r64480 Released Nov 14, 2017 WEX-WEI x86 64bit/MS Windows 04/12/21 18:58:55 Page 4
Cost objective calculations for UC models
E x e c u t i o n


----    708 PARAMETER rampup  increasing ramp rate of generator

                      ( ALL       0.000 )


----    708 PARAMETER rampdown  decreasing ramp rate of generator

                      ( ALL       0.000 )


----    708 PARAMETER minuptime  generator minimum time to remain on

1  1.000,    2  1.000,    3  1.000,    4  1.000,    5  1.000,    6  1.000
7  1.000,    8  1.000,    9  1.000,    10 1.000,    11 1.000,    12 1.000
13 1.000,    14 1.000,    15 1.000,    16 1.000,    17 1.000,    18 1.000
19 1.000,    20 1.000,    21 1.000,    22 1.000,    23 1.000,    24 1.000
25 1.000,    26 1.000,    27 1.000,    28 1.000,    29 1.000,    30 1.000
31 1.000,    32 1.000,    33 1.000,    34 1.000,    35 1.000,    36 1.000
37 1.000,    38 1.000,    39 1.000,    40 1.000,    41 1.000,    42 1.000
43 1.000,    44 1.000,    45 1.000,    46 1.000,    47 1.000,    48 1.000
49 1.000,    50 1.000,    51 1.000,    52 1.000,    53 1.000,    54 1.000


----    708 PARAMETER mindowntime  generator minimum time to remain off

1  1.000,    2  1.000,    3  1.000,    4  1.000,    5  1.000,    6  1.000
7  1.000,    8  1.000,    9  1.000,    10 1.000,    11 1.000,    12 1.000
13 1.000,    14 1.000,    15 1.000,    16 1.000,    17 1.000,    18 1.000
19 1.000,    20 1.000,    21 1.000,    22 1.000,    23 1.000,    24 1.000
25 1.000,    26 1.000,    27 1.000,    28 1.000,    29 1.000,    30 1.000
31 1.000,    32 1.000,    33 1.000,    34 1.000,    35 1.000,    36 1.000
37 1.000,    38 1.000,    39 1.000,    40 1.000,    41 1.000,    42 1.000
43 1.000,    44 1.000,    45 1.000,    46 1.000,    47 1.000,    48 1.000
49 1.000,    50 1.000,    51 1.000,    52 1.000,    53 1.000,    54 1.000

GAMS 24.9.2  r64480 Released Nov 14, 2017 WEX-WEI x86 64bit/MS Windows 04/12/21 18:58:55 Page 5
Cost objective calculations for UC models
Equation Listing    SOLVE uc_ac Using MINLP From line 713


---- c_LinePij  =E=  Real power flowing from bus i into bus j along line c

c_LinePij(1,2,1,4)..  - (9.16673548600215)*V_Theta(1,4)
     
      + (9.16673548600215)*V_Theta(2,4) + V_LineP(1,2,1,4)
     
      - (2.78030115341206)*V_V(1,4) + (2.78030115341206)*V_V(2,4) =E= 0 ;
     
      (LHS = 0)
     
c_LinePij(1,2,1,5)..  - (9.16673548600215)*V_Theta(1,5)
     
      + (9.16673548600215)*V_Theta(2,5) + V_LineP(1,2,1,5)
     
      - (2.78030115341206)*V_V(1,5) + (2.78030115341206)*V_V(2,5) =E= 0 ;
     
      (LHS = 0)
     
c_LinePij(1,2,1,6)..  - (9.16673548600215)*V_Theta(1,6)
     
      + (9.16673548600215)*V_Theta(2,6) + V_LineP(1,2,1,6)
     
      - (2.78030115341206)*V_V(1,6) + (2.78030115341206)*V_V(2,6) =E= 0 ;
     
      (LHS = 0)
     
REMAINING 555 ENTRIES SKIPPED


---- c_LinePji  =E=  Real power flowing from bus j into bus i along line c

c_LinePji(1,2,1,4)..  (9.16673548600215)*V_Theta(1,4)
     
      - (9.16673548600215)*V_Theta(2,4) + V_LineP(2,1,1,4)
     
      + (2.78030115341206)*V_V(1,4) - (2.78030115341206)*V_V(2,4) =E= 0 ;
     
      (LHS = 0)
     
c_LinePji(1,2,1,5)..  (9.16673548600215)*V_Theta(1,5)
     
      - (9.16673548600215)*V_Theta(2,5) + V_LineP(2,1,1,5)
     
      + (2.78030115341206)*V_V(1,5) - (2.78030115341206)*V_V(2,5) =E= 0 ;
     
      (LHS = 0)
     
c_LinePji(1,2,1,6)..  (9.16673548600215)*V_Theta(1,6)
     
      - (9.16673548600215)*V_Theta(2,6) + V_LineP(2,1,1,6)
     
      + (2.78030115341206)*V_V(1,6) - (2.78030115341206)*V_V(2,6) =E= 0 ;
     
      (LHS = 0)
     
REMAINING 555 ENTRIES SKIPPED


---- c_LineQij  =E=  Reactive power flowing from bus i into bus j along line c

c_LineQij(1,2,1,4)..  (2.78030115341206)*V_Theta(1,4)
     
      - (2.78030115341206)*V_Theta(2,4) + V_LineQ(1,2,1,4)
     
      - (9.14133548600214)*V_V(1,4) + (9.16673548600215)*V_V(2,4) =E= 0 ;
     
      (LHS = 0)
     
c_LineQij(1,2,1,5)..  (2.78030115341206)*V_Theta(1,5)
     
      - (2.78030115341206)*V_Theta(2,5) + V_LineQ(1,2,1,5)
     
      - (9.14133548600214)*V_V(1,5) + (9.16673548600215)*V_V(2,5) =E= 0 ;
     
      (LHS = 0)
     
c_LineQij(1,2,1,6)..  (2.78030115341206)*V_Theta(1,6)
     
      - (2.78030115341206)*V_Theta(2,6) + V_LineQ(1,2,1,6)
     
      - (9.14133548600214)*V_V(1,6) + (9.16673548600215)*V_V(2,6) =E= 0 ;
     
      (LHS = 0)
     
REMAINING 555 ENTRIES SKIPPED


---- c_LineQji  =E=  Reactive power flowing from bus j into bus i along line c

c_LineQji(1,2,1,4)..  - (2.78030115341206)*V_Theta(1,4)
     
      + (2.78030115341206)*V_Theta(2,4) + V_LineQ(2,1,1,4)
     
      + (9.16673548600215)*V_V(1,4) - (9.14133548600214)*V_V(2,4) =E= 0 ;
     
      (LHS = 0)
     
c_LineQji(1,2,1,5)..  - (2.78030115341206)*V_Theta(1,5)
     
      + (2.78030115341206)*V_Theta(2,5) + V_LineQ(2,1,1,5)
     
      + (9.16673548600215)*V_V(1,5) - (9.14133548600214)*V_V(2,5) =E= 0 ;
     
      (LHS = 0)
     
c_LineQji(1,2,1,6)..  - (2.78030115341206)*V_Theta(1,6)
     
      + (2.78030115341206)*V_Theta(2,6) + V_LineQ(2,1,1,6)
     
      + (9.16673548600215)*V_V(1,6) - (9.14133548600214)*V_V(2,6) =E= 0 ;
     
      (LHS = 0)
     
REMAINING 555 ENTRIES SKIPPED


---- c_BalanceP  =E=  Balance of real power for bus at time t

c_BalanceP(1,4)..  V_P(1,4) - V_LineP(1,2,1,4) - V_LineP(1,3,1,4) =E= 0.32538 ;
     
      (LHS = 0, INFES = 0.32538 ****)
     
c_BalanceP(1,5)..  V_P(1,5) - V_LineP(1,2,1,5) - V_LineP(1,3,1,5) =E= 0.33099 ;
     
      (LHS = 0, INFES = 0.33099 ****)
     
c_BalanceP(1,6)..  V_P(1,6) - V_LineP(1,2,1,6) - V_LineP(1,3,1,6) =E= 0.36465 ;
     
      (LHS = 0, INFES = 0.36465 ****)
     
REMAINING 351 ENTRIES SKIPPED


---- c_BalanceQ  =E=  Balance of reactive power for bus at time t

c_BalanceQ(1,4)..  V_Q(1,4) - V_LineQ(1,2,1,4) - V_LineQ(1,3,1,4) =E= 0.17226 ;
     
      (LHS = 0.0181100000000018, INFES = 0.154149999999998 ****)
     
c_BalanceQ(1,5)..  V_Q(1,5) - V_LineQ(1,2,1,5) - V_LineQ(1,3,1,5) =E= 0.17523 ;
     
      (LHS = 0.0181100000000018, INFES = 0.157119999999998 ****)
     
c_BalanceQ(1,6)..  V_Q(1,6) - V_LineQ(1,2,1,6) - V_LineQ(1,3,1,6) =E= 0.19305 ;
     
      (LHS = 0.0181100000000018, INFES = 0.174939999999998 ****)
     
REMAINING 351 ENTRIES SKIPPED


---- c_GenStatusMin  =L=  Generator minimum operating capacity

c_GenStatusMin(1,4)..  - V_P(1,4) =L= 0 ; (LHS = 0)
     
c_GenStatusMin(1,5)..  - V_P(1,5) =L= 0 ; (LHS = 0)
     
c_GenStatusMin(1,6)..  - V_P(1,6) =L= 0 ; (LHS = 0)
     
REMAINING 159 ENTRIES SKIPPED


---- c_GenStatusMax  =L=  Generator maximum operating capacity

c_GenStatusMax(1,4)..  V_P(1,4) - V_genstatus(1,4) =L= 0 ; (LHS = -1)
     
c_GenStatusMax(1,5)..  V_P(1,5) - V_genstatus(1,5) =L= 0 ; (LHS = -1)
     
c_GenStatusMax(1,6)..  V_P(1,6) - V_genstatus(1,6) =L= 0 ; (LHS = -1)
     
REMAINING 159 ENTRIES SKIPPED


---- c_GenStatusQMin  =L=  Generator minimum operating capacity

c_GenStatusQMin(1,4)..  - V_Q(1,4) - 0.05*V_genstatus(1,4) =L= 0 ; (LHS = -0.05)
     
c_GenStatusQMin(1,5)..  - V_Q(1,5) - 0.05*V_genstatus(1,5) =L= 0 ; (LHS = -0.05)
     
c_GenStatusQMin(1,6)..  - V_Q(1,6) - 0.05*V_genstatus(1,6) =L= 0 ; (LHS = -0.05)
     
REMAINING 159 ENTRIES SKIPPED


---- c_GenStatusQMax  =L=  Generator maximum operating capacity

c_GenStatusQMax(1,4)..  V_Q(1,4) - 0.15*V_genstatus(1,4) =L= 0 ; (LHS = -0.15)
     
c_GenStatusQMax(1,5)..  V_Q(1,5) - 0.15*V_genstatus(1,5) =L= 0 ; (LHS = -0.15)
     
c_GenStatusQMax(1,6)..  V_Q(1,6) - 0.15*V_genstatus(1,6) =L= 0 ; (LHS = -0.15)
     
REMAINING 159 ENTRIES SKIPPED


---- c_StartupShutdown  =E=  Relationship of binary (start,shut,status) variable
                             s

c_StartupShutdown(1,4)..  - V_genstatus(1,4) + V_startup(1,4) - V_shutdown(1,4)
      =E= 0 ; (LHS = 0)
     
c_StartupShutdown(1,5)..  V_genstatus(1,4) - V_genstatus(1,5) + V_startup(1,5)
     
      - V_shutdown(1,5) =E= 0 ; (LHS = 0)
     
c_StartupShutdown(1,6)..  V_genstatus(1,5) - V_genstatus(1,6) + V_startup(1,6)
     
      - V_shutdown(1,6) =E= 0 ; (LHS = 0)
     
REMAINING 159 ENTRIES SKIPPED


---- c_MinUptime  =G=  Minimum generator run time

c_MinUptime(1,4)..  V_genstatus(1,4) - V_startup(1,4) =G= 0 ; (LHS = 0)
     
c_MinUptime(1,5)..  V_genstatus(1,5) - V_startup(1,5) =G= 0 ; (LHS = 1)
     
c_MinUptime(1,6)..  V_genstatus(1,6) - V_startup(1,6) =G= 0 ; (LHS = 1)
     
REMAINING 159 ENTRIES SKIPPED


---- c_MinDowntime  =L=  Minimum generator down time

c_MinDowntime(1,4)..  V_genstatus(1,4) + V_shutdown(1,4) =L= 1 ; (LHS = 1)
     
c_MinDowntime(1,5)..  V_genstatus(1,5) + V_shutdown(1,5) =L= 1 ; (LHS = 1)
     
c_MinDowntime(1,6)..  V_genstatus(1,6) + V_shutdown(1,6) =L= 1 ; (LHS = 1)
     
REMAINING 159 ENTRIES SKIPPED


---- c_RampUp  =L=  Generator ramp up constraints

c_RampUp(1,5)..  - V_P(1,4) + V_P(1,5) - V_startup(1,5) =L= 0 ; (LHS = 0)
     
c_RampUp(1,6)..  - V_P(1,5) + V_P(1,6) - V_startup(1,6) =L= 0 ; (LHS = 0)
     
c_RampUp(2,5)..  - V_P(2,4) + V_P(2,5) - V_startup(2,5) =L= 0 ; (LHS = 0)
     
REMAINING 105 ENTRIES SKIPPED


---- c_RampDown  =L=  Generator ramp down constraints

c_RampDown(1,5)..  V_P(1,4) - V_P(1,5) - V_shutdown(1,5) =L= 0 ; (LHS = 0)
     
c_RampDown(1,6)..  V_P(1,5) - V_P(1,6) - V_shutdown(1,6) =L= 0 ; (LHS = 0)
     
c_RampDown(2,5)..  V_P(2,4) - V_P(2,5) - V_shutdown(2,5) =L= 0 ; (LHS = 0)
     
REMAINING 105 ENTRIES SKIPPED


---- c_InterfaceP  =E=  Definition of real power on interfaces involving (i,j,c)
                        at time

                NONE


---- c_InterfaceLimit  =L=  Limit of real power on interface at time t

                NONE


---- c_anglediffIJ  =L=  Limit on (i,j) angle

c_anglediffIJ(1,2,4)..  V_Theta(1,4) - V_Theta(2,4) =L= 1.0471975511966 ;
     
      (LHS = 0)
     
c_anglediffIJ(1,2,5)..  V_Theta(1,5) - V_Theta(2,5) =L= 1.0471975511966 ;
     
      (LHS = 0)
     
c_anglediffIJ(1,2,6)..  V_Theta(1,6) - V_Theta(2,6) =L= 1.0471975511966 ;
     
      (LHS = 0)
     
REMAINING 534 ENTRIES SKIPPED


---- c_anglediffJI  =L=  Limit on (j,i) angle

c_anglediffJI(1,2,4)..  - V_Theta(1,4) + V_Theta(2,4) =L= 1.0471975511966 ;
     
      (LHS = 0)
     
c_anglediffJI(1,2,5)..  - V_Theta(1,5) + V_Theta(2,5) =L= 1.0471975511966 ;
     
      (LHS = 0)
     
c_anglediffJI(1,2,6)..  - V_Theta(1,6) + V_Theta(2,6) =L= 1.0471975511966 ;
     
      (LHS = 0)
     
REMAINING 534 ENTRIES SKIPPED


---- c_pw_cost  =G=  

                NONE


---- c_obj  =E=  

c_obj..  V_objcost =E= 0 ; (LHS = 0)
     
GAMS 24.9.2  r64480 Released Nov 14, 2017 WEX-WEI x86 64bit/MS Windows 04/12/21 18:58:55 Page 6
Cost objective calculations for UC models
Column Listing      SOLVE uc_ac Using MINLP From line 713


---- V_P  Real power generation of generator at time t

V_P(1,4)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       c_BalanceP(1,4)
       -1       c_GenStatusMin(1,4)
        1       c_GenStatusMax(1,4)
       -1       c_RampUp(1,5)
        1       c_RampDown(1,5)

V_P(1,5)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       c_BalanceP(1,5)
       -1       c_GenStatusMin(1,5)
        1       c_GenStatusMax(1,5)
        1       c_RampUp(1,5)
       -1       c_RampUp(1,6)
       -1       c_RampDown(1,5)
        1       c_RampDown(1,6)

V_P(1,6)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       c_BalanceP(1,6)
       -1       c_GenStatusMin(1,6)
        1       c_GenStatusMax(1,6)
        1       c_RampUp(1,6)
       -1       c_RampDown(1,6)

REMAINING 159 ENTRIES SKIPPED

---- V_Q  Reactive power generation of generator at time t

V_Q(1,4)
                (.LO, .L, .UP, .M = -0.05, 0, 0.15, 0)
        1       c_BalanceQ(1,4)
       -1       c_GenStatusQMin(1,4)
        1       c_GenStatusQMax(1,4)

V_Q(1,5)
                (.LO, .L, .UP, .M = -0.05, 0, 0.15, 0)
        1       c_BalanceQ(1,5)
       -1       c_GenStatusQMin(1,5)
        1       c_GenStatusQMax(1,5)

V_Q(1,6)
                (.LO, .L, .UP, .M = -0.05, 0, 0.15, 0)
        1       c_BalanceQ(1,6)
       -1       c_GenStatusQMin(1,6)
        1       c_GenStatusQMax(1,6)

REMAINING 159 ENTRIES SKIPPED

---- V_Theta  Bus voltage angle

V_Theta(1,4)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
      (-9.1667) c_LinePij(1,2,1,4)
     (-21.5867) c_LinePij(1,3,1,4)
       (9.1667) c_LinePji(1,2,1,4)
      (21.5867) c_LinePji(1,3,1,4)
       (2.7803) c_LineQij(1,2,1,4)
       (6.5677) c_LineQij(1,3,1,4)
      (-2.7803) c_LineQji(1,2,1,4)
      (-6.5677) c_LineQji(1,3,1,4)
        1       c_anglediffIJ(1,2,4)
        1       c_anglediffIJ(1,3,4)
       -1       c_anglediffJI(1,2,4)
       -1       c_anglediffJI(1,3,4)

V_Theta(1,5)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
      (-9.1667) c_LinePij(1,2,1,5)
     (-21.5867) c_LinePij(1,3,1,5)
       (9.1667) c_LinePji(1,2,1,5)
      (21.5867) c_LinePji(1,3,1,5)
       (2.7803) c_LineQij(1,2,1,5)
       (6.5677) c_LineQij(1,3,1,5)
      (-2.7803) c_LineQji(1,2,1,5)
      (-6.5677) c_LineQji(1,3,1,5)
        1       c_anglediffIJ(1,2,5)
        1       c_anglediffIJ(1,3,5)
       -1       c_anglediffJI(1,2,5)
       -1       c_anglediffJI(1,3,5)

V_Theta(1,6)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
      (-9.1667) c_LinePij(1,2,1,6)
     (-21.5867) c_LinePij(1,3,1,6)
       (9.1667) c_LinePji(1,2,1,6)
      (21.5867) c_LinePji(1,3,1,6)
       (2.7803) c_LineQij(1,2,1,6)
       (6.5677) c_LineQij(1,3,1,6)
      (-2.7803) c_LineQji(1,2,1,6)
      (-6.5677) c_LineQji(1,3,1,6)
        1       c_anglediffIJ(1,2,6)
        1       c_anglediffIJ(1,3,6)
       -1       c_anglediffJI(1,2,6)
       -1       c_anglediffJI(1,3,6)

REMAINING 351 ENTRIES SKIPPED

---- V_LineP  Real power flowing from bus i towards bus j on line c at time t

V_LineP(1,2,1,4)
                (.LO, .L, .UP, .M = -99, 0, 99, 0)
        1       c_LinePij(1,2,1,4)
       -1       c_BalanceP(1,4)

V_LineP(1,2,1,5)
                (.LO, .L, .UP, .M = -99, 0, 99, 0)
        1       c_LinePij(1,2,1,5)
       -1       c_BalanceP(1,5)

V_LineP(1,2,1,6)
                (.LO, .L, .UP, .M = -99, 0, 99, 0)
        1       c_LinePij(1,2,1,6)
       -1       c_BalanceP(1,6)

REMAINING 1113 ENTRIES SKIPPED

---- V_LineQ  Real power flowing from bus i towards bus j on line c at time t

V_LineQ(1,2,1,4)
                (.LO, .L, .UP, .M = -INF, -0.0127000000000006, +INF, 0)
        1       c_LineQij(1,2,1,4)
       -1       c_BalanceQ(1,4)

V_LineQ(1,2,1,5)
                (.LO, .L, .UP, .M = -INF, -0.0127000000000006, +INF, 0)
        1       c_LineQij(1,2,1,5)
       -1       c_BalanceQ(1,5)

V_LineQ(1,2,1,6)
                (.LO, .L, .UP, .M = -INF, -0.0127000000000006, +INF, 0)
        1       c_LineQij(1,2,1,6)
       -1       c_BalanceQ(1,6)

REMAINING 1113 ENTRIES SKIPPED

---- V_genstatus  Generator commitment status for time t

V_genstatus(1,4)
                (.LO, .L, .UP, .M = 1, 1, 1, 0)
       -1       c_GenStatusMax(1,4)
       -0.05    c_GenStatusQMin(1,4)
       -0.15    c_GenStatusQMax(1,4)
       -1       c_StartupShutdown(1,4)
        1       c_StartupShutdown(1,5)
        1       c_MinUptime(1,4)
        1       c_MinDowntime(1,4)

V_genstatus(1,5)
                (.LO, .L, .UP, .M = 1, 1, 1, 0)
       -1       c_GenStatusMax(1,5)
       -0.05    c_GenStatusQMin(1,5)
       -0.15    c_GenStatusQMax(1,5)
       -1       c_StartupShutdown(1,5)
        1       c_StartupShutdown(1,6)
        1       c_MinUptime(1,5)
        1       c_MinDowntime(1,5)

V_genstatus(1,6)
                (.LO, .L, .UP, .M = 1, 1, 1, 0)
       -1       c_GenStatusMax(1,6)
       -0.05    c_GenStatusQMin(1,6)
       -0.15    c_GenStatusQMax(1,6)
       -1       c_StartupShutdown(1,6)
        1       c_MinUptime(1,6)
        1       c_MinDowntime(1,6)

REMAINING 159 ENTRIES SKIPPED

---- V_startup  (0,1) startup status of generator at time t

V_startup(1,4)
                (.LO, .L, .UP, .M = 0, 1, +INF, 0)
        1       c_StartupShutdown(1,4)
       -1       c_MinUptime(1,4)

V_startup(1,5)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       c_StartupShutdown(1,5)
       -1       c_MinUptime(1,5)
       -1       c_RampUp(1,5)

V_startup(1,6)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       c_StartupShutdown(1,6)
       -1       c_MinUptime(1,6)
       -1       c_RampUp(1,6)

REMAINING 159 ENTRIES SKIPPED

---- V_shutdown  (0,1) shutdown status of generator at time t

V_shutdown(1,4)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -1       c_StartupShutdown(1,4)
        1       c_MinDowntime(1,4)

V_shutdown(1,5)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -1       c_StartupShutdown(1,5)
        1       c_MinDowntime(1,5)
       -1       c_RampDown(1,5)

V_shutdown(1,6)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -1       c_StartupShutdown(1,6)
        1       c_MinDowntime(1,6)
       -1       c_RampDown(1,6)

REMAINING 159 ENTRIES SKIPPED

---- V_V  Voltage real part at bus at time t

V_V(1,4)
                (.LO, .L, .UP, .M = 0.94, 1, 1.06, 0)
      (-2.7803) c_LinePij(1,2,1,4)
      (-6.5677) c_LinePij(1,3,1,4)
       (2.7803) c_LinePji(1,2,1,4)
       (6.5677) c_LinePji(1,3,1,4)
      (-9.1413) c_LineQij(1,2,1,4)
     (-21.5759) c_LineQij(1,3,1,4)
       (9.1667) c_LineQji(1,2,1,4)
      (21.5867) c_LineQji(1,3,1,4)

V_V(1,5)
                (.LO, .L, .UP, .M = 0.94, 1, 1.06, 0)
      (-2.7803) c_LinePij(1,2,1,5)
      (-6.5677) c_LinePij(1,3,1,5)
       (2.7803) c_LinePji(1,2,1,5)
       (6.5677) c_LinePji(1,3,1,5)
      (-9.1413) c_LineQij(1,2,1,5)
     (-21.5759) c_LineQij(1,3,1,5)
       (9.1667) c_LineQji(1,2,1,5)
      (21.5867) c_LineQji(1,3,1,5)

V_V(1,6)
                (.LO, .L, .UP, .M = 0.94, 1, 1.06, 0)
      (-2.7803) c_LinePij(1,2,1,6)
      (-6.5677) c_LinePij(1,3,1,6)
       (2.7803) c_LinePji(1,2,1,6)
       (6.5677) c_LinePji(1,3,1,6)
      (-9.1413) c_LineQij(1,2,1,6)
     (-21.5759) c_LineQij(1,3,1,6)
       (9.1667) c_LineQji(1,2,1,6)
      (21.5867) c_LineQji(1,3,1,6)

REMAINING 351 ENTRIES SKIPPED

---- V_objcost  Total cost of objective function

V_objcost
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       c_obj

GAMS 24.9.2  r64480 Released Nov 14, 2017 WEX-WEI x86 64bit/MS Windows 04/12/21 18:58:55 Page 7
Cost objective calculations for UC models
Model Statistics    SOLVE uc_ac Using MINLP From line 713


MODEL STATISTICS

BLOCKS OF EQUATIONS          21     SINGLE EQUATIONS        5,365
BLOCKS OF VARIABLES          10     SINGLE VARIABLES        3,751
NON ZERO ELEMENTS        18,931     NON LINEAR N-Z          8,970
DERIVATIVE POOL              20     CONSTANT POOL             555
CODE LENGTH              42,051


GENERATION TIME      =        0.016 SECONDS      8 MB  24.9.2 r64480 WEX-WEI


EXECUTION TIME       =        0.031 SECONDS      8 MB  24.9.2 r64480 WEX-WEI
